TODOs:

parse files to dataframes (making sure columns can be split up between the number of nodes)
send the 3 dataframes to clients

for each degree:
    MsgType::SetRower
    bool* list of users where if the user is whatever  degree away, the index of that user's id is true
    for example the first time only linus's index is true

    rower has get project ids

    -----------------------------------
    new rower type with bitmap of project ids where the id is true if it's in the list we get back from the clients
    send that rower to the clients
    run the rower on the clients

    rower has get client ids


    send dataframe(?) of users to clients
    clients search for PIDs (how??)
    clients send rower back to server


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -


DataFrame 1 projects:
cols: PID(int) name(string)

DataFrame 2 users:
cols: UID(int) name(string)

DataFrame 3 commits:
cols: PID(int) UID[writer](int) UID[committer](int)

degrees away from linus:
- find PIDs where linus is writer or committer
- find all other writers and committers on those same PIDs